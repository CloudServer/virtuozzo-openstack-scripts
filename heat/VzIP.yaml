heat_template_version: 2017-02-24

description: >
  A HOT to create Virtuozzo Storage (VStorage) Cluster consisting of five instances: three
  of wich are Meta Data servers (MDS) and all five instances are chunk servers (CS).
  VStorage is software defined distributed storage, which allows you to build fault-tolerant,
  multi-machine storage clusters using existing or off-the-shelf hardware to enable highly
  flexible, distributed storage that is scalable to your needs, and comes with built-in
  replication to ensure the safety of your data. Read more at [1].
  [1] https://virtuozzo.com/products/virtuozzo-storage/

parameters:

  key_name:
    type: string
    description: Name of a KeyPair to enable SSH access to the instance

  instance_type:
    type: string
    description: Instance type for all servers
    default: vzip
    constraints:
      - allowed_values: [vzip, virtuozzo]
        description: instance_type must have an ephemeral disk

  image_id:
    type: string
    description: >
      Name or ID of the image to use for the VStorage servers.
      They should be build from Virtuozzo distribution.
      See disk image builder help.
    default: vz7-vm-template

  cluster_name:
    type: string
    description: VStorage cluster name
    constraints:
      - length: { min: 1, max: 64 }
        description: cluster name must be between 1 and 64 characters
        description: >
          cluster_name must begin with a letter and contain only alphanumeric
          characters

  cluster_password:
    type: string
    description: Newly created VStorage Cluster admin account password
    hidden: true

  storage_net_id:
    type: string
    description: ID of Neutron network into which servers get deployed
    default: storage

  storage_subnet_id:
    type: string
    description: ID of Neutron sub network into which servers get deployed
    default: storage-subnet

  api_net_id:
    type: string
    description: ID of Neutron network into which servers get deployed
    default: api

  api_subnet_id:
    type: string
    description: ID of Neutron sub network into which servers get deployed
    default: api-subnet

  external_net_id:
    type: string
    description: ID of Neutron network into which servers get deployed
    default: external

  external_subnet_id:
    type: string
    description: ID of Neutron sub network into which servers get deployed
    default: ext-subnet

  private_net_id:
    type: string
    description: ID of Neutron network into which servers get deployed
    default: private

  private_subnet_id:
    type: string
    description: ID of Neutron sub network into which servers get deployed
    default: private-subnet

  timeout:
    type: number
    description: Timeout for WaitCondition
    default: 300

resources:

  wait_condition:
    type: OS::Heat::WaitCondition
    properties:
      handle: { get_resource: wait_handle }
      count: 1
      timeout: {get_param: timeout}

  wait_handle:
    type: OS::Heat::WaitConditionHandle

  AutoScalingGroup:
    type: OS::Heat::AutoScalingGroup
    depends_on: wait_condition
    properties:
      resource:
        type: VZ::Storage::Server
        properties:
          name: "asg"
          image_id: { get_param: image_id}
          key_name: { get_param: key_name}
          instance_type: {get_param: instance_type}
          storage_net_id: {get_param: storage_net_id}
          storage_subnet_id: {get_param: storage_subnet_id}
          api_net_id: {get_param: api_net_id}
          api_subnet_id: {get_param: api_subnet_id}
          external_net_id: {get_param: external_net_id}
          external_subnet_id: {get_param: external_subnet_id}
          private_net_id: {get_param: private_net_id}
          private_subnet_id: {get_param: private_subnet_id}
          cluster_password: { get_param: cluster_password}
          cluster_name: { get_param: cluster_name}
          wc_notify: 'echo'
      min_size: 2
      desired_capacity: 4
      max_size: 9

  FirstServer:
    type: VZ::Storage::Server
    properties:
      name: "first"
      image_id: { get_param: image_id}
      key_name: { get_param: key_name}
      instance_type: {get_param: instance_type}
      storage_net_id: {get_param: storage_net_id}
      storage_subnet_id: {get_param: storage_subnet_id}
      api_net_id: {get_param: api_net_id}
      api_subnet_id: {get_param: api_subnet_id}
      external_net_id: {get_param: external_net_id}
      external_subnet_id: {get_param: external_subnet_id}
      private_net_id: {get_param: private_net_id}
      private_subnet_id: {get_param: private_subnet_id}
      cluster_password: { get_param: cluster_password}
      cluster_name: { get_param: cluster_name}
      wc_notify: { get_attr: ['wait_handle', 'curl_cli'] }

  scale_up_policy:
    type: OS::Heat::ScalingPolicy
    properties:
      adjustment_type: change_in_capacity
      auto_scaling_group_id: {get_resource: AutoScalingGroup}
      cooldown: 60
      scaling_adjustment: 1

  scale_down_policy:
    type: OS::Heat::ScalingPolicy
    properties:
      adjustment_type: change_in_capacity
      auto_scaling_group_id: {get_resource: AutoScalingGroup}
      cooldown: 60
      scaling_adjustment: '-1'

outputs:
  scale_up_url:
    description: >
      This URL is the webhook to scale up the group.  You can invoke
      the scale-up operation by doing an HTTP POST to this URL; no
      body nor extra headers are needed.
    value: {get_attr: [scale_up_policy, alarm_url]}
  scale_dn_url:
    description: >
      This URL is the webhook to scale down the group.  You can invoke
      the scale-down operation by doing an HTTP POST to this URL; no
      body nor extra headers are needed.
    value: {get_attr: [scale_down_policy, alarm_url]}
  asg_size:
    description: >
      This is the current size of the auto scaling group.
    value: {get_attr: [AutoScalingGroup, current_size]}
  server_list:
    description: >
      This is a list of server names that are part of the group.
    value: {get_attr: [AutoScalingGroup, outputs_list, name]}
  server_ips:
    description: >
      This is a list of first ip addresses of the servers in the group
      for a specified network.
    value: {get_attr: [AutoScalingGroup, outputs_list, networks, {get_param: network}, 0]}

